lass Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>(); //定义一个结果二维数组
        Arrays.sort(nums); //降序排序
        // 找出a + b + c = 0
        // a = nums[i], b = nums[left], c = nums[right]
        for(int i = 0; i < nums.length; i++){
            if(nums[i]>0){
                return result;
            }
            if(i > 0 && nums[i-1] == nums[i]){ //去重a
                continue;
            }
            int left = i+1;
            int right = nums.length - 1;
            while(right > left){
                int sum = nums[i] + nums[left] + nums[right];
                if(sum < 0){
                    left++;
                }else if(sum > 0){
                    right--;
                }else{
                    result.add(Arrays.asList(nums[i],nums[left], nums[right]));
                    // 去重逻辑应该放在找到一个三元组之后，对b 和 c去重
                    while(right>left && nums[right]==nums[right-1]){
                        right--;
                    }
                    while(right>left && nums[left]==nums[left+1]){
                        left++;
                    }
                }
                left++;
                right--;
            }

        }
        return result;
    }
}



1.初始化:创建一个空的 result 列表来存放找到的三元组。
2.排序数组:对输入的 nums 数组进行排序，这样我们可以用双指针法有效地找到和为零的三元组。
3.遍历数组中的每一个元素
3.1提前结束的条件:如果当前元素 nums[i] 大于0，那么不可能有三个数的和为零，因为数组已经排序。
直接返回已找到的结果。
3.2 跳过重复的 a:如果当前元素和前一个元素相同，则跳过当前迭代以避免重复。
3.3 初始化双指针:left 指针指向 i 的下一个元素。right 指针指向数组的最后一个元素。
3.4 双指针遍历: 当 right 指针在 left 指针的右侧时，继续执行以下操作：
a. 计算三数之和：sum = nums[i] + nums[left] + nums[right]。
b. 如果 sum 大于0，移动 right 指针向左。
c. 如果 sum 小于0，移动 left 指针向右。
d. 如果 sum 等于0，找到了一个三元组，将其添加到结果列表中。
e. 跳过重复的 b 和 c：在找到一个和为零的三元组后，移动 left 和 right 指针来跳过所有重复的元素，以避免结果中的重复。
f. 继续移动 left 和 right，查找其他可能的三元组。
4.返回结果














