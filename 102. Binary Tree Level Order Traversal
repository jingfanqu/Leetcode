/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        //定义一个结果二维数组
        public List<List<Integer>> resList = new ArrayList<List<Integer>>();
        checkFun02(root);
        return resList;

        public void checkFun02(TreeNode node){
            if(node==null) return;
            Queue<TreeNode> que = new LinkedList<TreeNode>();
            que.offer(node);

            while(!que.isEmpty()){
                List<Integer> itemList = new ArrayList<>();
                int len = que.size();
                while(len>0){
                    TreeNode TmpNode= que.poll();
                    itemList.add(TmpNode.val);

                    if(TmpNode.left!=null) que.offer(tmpNode.left);
                    if(tmpNode.right != null) que.offer(tmpNode.right);
                    len--;
                }
                resList.add(itemList);
            }
        }
    


    }
}
