/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> res = new ArrayList<>();
        if(root == null){
            return res;
        }
        List<Integer> paths= new ArrayList<>();
        traversal(root, paths, res);
        return res;

    }

    private void traversal(TreeNode root, List<Integer> paths, List<String> res){

        paths.add(root.val);
        if(root.left == null && root.right == null){
            StringBuilder sb = new StringBuilder();
            for(int i = 0; i < paths.size() - 1; i++){
                sb.append(paths.get(i)).append("->");
                
            }
            sb.append(paths.get(paths.size() - 1));//不想在其后面添加"->"。所以，经过循环处理后，我们只添加最后一个元素，确保格式正确
            res.add(sb.toString());
            return;

        }

        if(root.left != null){
            traversal(root.left, paths, res);
            paths.remove(paths.size()-1);
        }

        if(root.right != null){
            traversal(root.right, paths, res);
            paths.remove(paths.size()-1);
        }

    }
}
